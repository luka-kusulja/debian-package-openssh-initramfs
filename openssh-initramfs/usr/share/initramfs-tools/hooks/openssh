#!/bin/sh

PREREQ=""

prereqs() {
    echo "$PREREQ"
}

case "$1" in
    prereqs)
        prereqs
        exit 0
    ;;
esac

. /usr/share/initramfs-tools/hook-functions

if [ -e /etc/openssh-initramfs/config ]; then
    . /etc/openssh-initramfs/config
fi

openssh_warn() {
    echo "openssh: WARNING:" "$@" >&2
}

# Avoid conflict with dropbear if it is installed.
# NOTE: We know this is ugly, bu we are running in a POSIX shell (likely dash
# as sh is by default symlinked to dash on Debian) which do not have arrays as
# specification.
dropbear_files=$(find /usr/share/initramfs-tools/ -name '*dropbear*' 2>/dev/null)
for file in $dropbear_files; do
    if [ -f "$file" ]; then
        openssh_warn "Uninstall dropbear-initramfs first in order to don't conflict with this openssh-based initramfs implementation"
        exit 0
    fi
done

[ -r /etc/crypttab ] || exit 0

copy_exec /usr/sbin/sshd /sbin

current_user=$(logname)
if [ "$current_user" = "root" ]
then
    echo "ERROR: root cannot be used to unlock the server, create new user account"
    exit 0
fi
echo "Only user $current_user will be able to unlock the server"

# Create a specific home directory for the home user
home=$(mktemp -d "$DESTDIR/$current_user-XXXXXX")
chmod 0700 "$home"
echo "passwd: files" >"$DESTDIR/etc/nsswitch.conf"
echo "group: files" >"$DESTDIR/etc/nsswitch.conf"
echo "$current_user:*:0:11:$current_user:${home#$DESTDIR}:/bin/sh" >"$DESTDIR/etc/passwd"
echo "sshd:x:105:65534::/run/sshd:/usr/sbin/nologin" >>"$DESTDIR/etc/passwd"
echo "$current_user:x:11:" >"$DESTDIR/etc/group"

# Copy SSH daemon configuration
mkdir -p "$DESTDIR/etc/ssh"
if [ -e /etc/openssh-initramfs/sshd_config ]; then
    cp -p "/etc/openssh-initramfs/sshd_config" "$DESTDIR/etc/ssh/"
else
    cp -p "/etc/ssh/sshd_config" "$DESTDIR/etc/ssh/"
fi
if [ -e /etc/openssh-initramfs/config ]; then
    mkdir -p "$DESTDIR/etc/openssh-initramfs"
    cp -p "/etc/openssh-initramfs/config" "$DESTDIR/etc/openssh-initramfs"
fi

# Copy SSH host keys
host_keys="$(find /etc/openssh-initramfs -name 'ssh_host*key*' 2>/dev/null)"
if [ -n "$host_keys" ]; then
    cp -p /etc/openssh-initramfs/ssh_host*key* "$DESTDIR/etc/ssh"
else
    openssh_warn "No SSH host keys found in /etc/openssh-initramfs, remote unlocking with cryptroot-unlock via SSH won't work!"
fi

# Copy authorized_keys
mkdir -m0700 "$home/.ssh"
if [ -e /etc/openssh-initramfs/authorized_keys ]; then
    cp "/etc/openssh-initramfs/authorized_keys" "$home/.ssh/authorized_keys"
else
    touch "$home/.ssh/authorized_keys"
fi
chmod 0600 "$home/.ssh/authorized_keys"

for user in $SSH_AUTHORIZED_KEYS_FROM; do
    if [ "$user" = "{currentuser}" ]
    then
        user=$current_user
    fi

    user_home="$(getent passwd $user | cut -f6 -d:)"
    if [ -f "$user_home/.ssh/authorized_keys" ]; then
        echo "Adding authorized keys of $user"
        echo "\n# $user" >> "$home/.ssh/authorized_keys"
        grep -o '^[^#]*' "$user_home/.ssh/authorized_keys" >> "$home/.ssh/authorized_keys"
    fi
done

if [ ! -s "$home/.ssh/authorized_keys" ]; then
    openssh_warn "No authorized keys copied. Remote unlocking with cryptroot-unlock via SSH won't work!"
fi